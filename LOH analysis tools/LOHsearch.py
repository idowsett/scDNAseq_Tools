"""
This script takes four input files generated by JLSlineage_caller_py3.py (or the optional snakemake pipeline): noSNP.var files for each, an Aged Mother
Yeast's last daughter, that daughter's daughter and a corresponding "forever young" lineage pair that have undergone the same number of divisions.
It then screens for places in the genome where heterozygous SNPs that resulted from the hybridized mating of two wildstrains are
converted to a homozygous variant, indicating a Loss of Heterozygosity event (LOH).
When such events are detected it outputs this location to one of two text files (One for Aged Pairs and one for Forever Young Pairs).
These locations can then be graphed on the graphical yeast genome using the script: graphing_loh.py.
"""

import glob
import pandas as pd

def Frameit(name, num, form): #Return the paired dataframes for the mother and daughters
    file = (f"{name}{num}{form}.noSNP.var")
    with open(file,'r') as f:
        part1 = [i for i in f]
        col = part1[0].split('\n')[0].split('\t')
        part1 = part1[1:]
        dat = pd.DataFrame([i.split('\t')[:5] for i in part1], columns=col[:5])
    name = str(file)
    print(f"framing up {name}")
    dat.insert(0, "Strain", name, True)
    new = dat['Cons:Cov:Reads1:Reads2:Freq:P-value'].str.split(":", n = 5, expand = True) # new data frame with split value columns
    adding_names = col[4].split(":")
    for i in range(0,len(adding_names)): # making separate column from each new data frame (and looping through)
        dat[adding_names[i]] = new[i]
    dat.drop(columns =[col[4]], inplace = True) # Dropping old column
    if form == 'd':
        return(dat)
    elif form == '':
        return(dat)

def Unify(M,D): #converts the data frames to a unified dictionary of position : (Mfreq, pvalue)(Dfreq, pvalue)
    Md, Dd, MDd = {}, {}, {}
    for row in M.itertuples():
        chrom = row[2]
        position = row[3]
        Md[chrom + ':' + position] = (float(row[10].split('%')[0]),row[11])
    for row in D.itertuples():
        chrom = row[2]
        position = row[3]
        Dd[chrom + ':' + position] = (float(row[10].split('%')[0]),row[11])

    for key, value in Md.items():
        if key in Dd:
            MDd[key] = ((value),(Dd[key]))
    return (MDd)

# 100% SNP fingerprint for identification/verification purposes:
def Find_Finger(paired): # builds a dictionary of all 90+ (high likelihood homozygous) snps shared between both colonies
    finger = {}
    for k,v in (paired.items()):
        if v[0][0] > 90 and v[1][0] > 90:
            finger[k] = v
    return (finger)

# now doing the same but just for the hets. (could make these run together as needed.)
def Find_HetSNP(paired):
    hetSNP = {}
    for k,v in (paired.items()):
        if (20 < v[0][0] < 80) and (20 < v[1][0] < 80):
            hetSNP[k] = v
    return (hetSNP)

ID = 'IanWSAge-4-'
M, D = 'null', 'null'
pair = ['','d']
formatter = ['','o','fy']

for num in range(1,16): #range corresponding to the yeast chromosome number
    try:
        for form in pair: #initiates data frames for m/d pairs
            if form == '':
                init_M = Frameit(ID, num, form)
            elif form == 'd':
                init_D = Frameit(ID, num, form)

        init_paired = Unify(init_M,init_D)
        init_finger = Find_Finger(init_paired)
        init_het = Find_HetSNP(init_paired)
        # adjusting formatter list to find old lineage pair
        for form in pair:
            if form == '':
                o_M = Frameit((ID + formatter[1]), num, form)
            elif form == 'd':
                o_D = Frameit((ID + formatter[1]), num, form)

        o_paired = Unify(o_M,o_D)
        o_finger = Find_Finger(o_paired)
        o_het = Find_HetSNP(o_paired)

        # for k,v in init_het.items():
        #     if k in o_finger:
        #         print(f"O LOH at {k} with {v} and {o_finger[k]}")

        # and forever young lineage (SGS1 mutant lines have no FY lineage, comment out in these cases)
        for form in pair:
            if form == '':
                fy_M = Frameit((ID + formatter[2]), num, form)
            elif form == 'd':
                fy_D = Frameit((ID + formatter[2]), num, form)

        fy_paired = Unify(fy_M,fy_D)
        fy_finger = Find_Finger(fy_paired)
        fy_het = Find_HetSNP(fy_paired)


        # export for aged:
        with open(f"{ID}{num}LOH.txt", "w+") as file:
            for k,v in init_het.items():
                v1 = float(v[0][0])
                v2 = float(v[0][1])
                v3 = float(v[1][0])
                v4 = float(v[1][1])
                if k in o_finger:
                    o1 = float(o_finger[k][0][0])
                    o2 = float(o_finger[k][0][1])
                    o3 = float(o_finger[k][1][0])
                    o4 = float(o_finger[k][1][1])
                    file.write(f"{k}\t{v1}\t{v2}\t{v3}\t{v4}\t{o1}\t{o2}\t{o3}\t{o4}\n")

        # export for forever young:
        with open(f"{ID}{num}LOH_fy.txt", "w+") as file:
            for k,v in fy_het.items():
                v1 = float(v[0][0])
                v2 = float(v[0][1])
                v3 = float(v[1][0])
                v4 = float(v[1][1])
                if k in fy_finger:
                    o1 = float(fy_finger[k][0][0])
                    o2 = float(fy_finger[k][0][1])
                    o3 = float(fy_finger[k][1][0])
                    o4 = float(fy_finger[k][1][1])
                    file.write(f"{k}\t{v1}\t{v2}\t{v3}\t{v4}\t{o1}\t{o2}\t{o3}\t{o4}\n")

    except FileNotFoundError:
        print("error, file not found")
        continue
